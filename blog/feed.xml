<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bundler Blog</title>
  <subtitle>The latest news on Bundler</subtitle>
  <id>http://bundler.io/blog</id>
  <link href="http://bundler.io/blog"/>
  <link href="http://bundler.io/blog/feed.xml" rel="self"/>
  <updated>2017-05-19T12:00:00+00:00</updated>
  <author>
    <name>The Bundler Team</name>
  </author>
  <entry>
    <title>Bundler 1.15: Bundle Oh So Fast</title>
    <link rel="alternate" href="http://bundler.io/blog/2017/05/19/bundler-1-15-bundle-oh-so-fast.html"/>
    <id>http://bundler.io/blog/2017/05/19/bundler-1-15-bundle-oh-so-fast.html</id>
    <published>2017-05-19T12:00:00+00:00</published>
    <updated>2017-06-09T15:01:36+00:00</updated>
    <author>
      <name>Samuel Giddins</name>
    </author>
    <content type="html">&lt;h1 id="whats-new-in-bundler-115"&gt;What’s new in Bundler 1.15?&lt;/h1&gt;

&lt;p&gt;Hot on the heels of the many small fixes in Bundler 1.14, we’re pushing out 1.15. The list of changes is much shorter, but we think you’re going to love it all the same, since this time around we’ve focused on making Bundler a whole heck of a lot faster.&lt;/p&gt;

&lt;h3 id="speed"&gt;Speed&lt;/h3&gt;

&lt;p&gt;Due to &lt;a href="https://github.com/jules2689"&gt;Julian Nadeau&lt;/a&gt;’s prompting, we’ve made loading up Bundler fast. Up to a half a second faster than before, on every &lt;code&gt;bundle exec&lt;/code&gt;, &lt;code&gt;require "bundler/setup"&lt;/code&gt;, &lt;code&gt;Bundler.setup&lt;/code&gt;, and &lt;code&gt;Bundler.require&lt;/code&gt;. This is going to save developers a lot of time, given how often we tend to run things!&lt;/p&gt;

&lt;p&gt;The mere act of initializing a Gemfile has been sped up by turning array lookups into hash table accesses, making expensive comparisons lazy, and generally avoiding object allocation.&lt;/p&gt;

&lt;p&gt;We also now only validate git gems when they are first downloaded &amp;amp; installed, meaning projects with many git gems won’t be validating each and every one of them over and over again.&lt;/p&gt;

&lt;p&gt;Finally, we’ve managed to avoid evaluating the full &lt;code&gt;.gemspec&lt;/code&gt; of all the gems that are being loaded when running on RubyGems 2.5 and above. Taking advantage of a feature called stub specifications, Bundler is able to grab all of the information it needs from the first two lines of a serialized gemspec file, without evaluating the rest. This represents a massive time savings for very large Gemfiles.&lt;/p&gt;

&lt;h3 id="new-commands"&gt;New Commands&lt;/h3&gt;

&lt;p&gt;We’ve added 3 new commands that have been on our wish list for a long time.&lt;/p&gt;

&lt;h4 id="bundle-info"&gt;&lt;code&gt;bundle info&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This command prints out basic information about the given gem, and is intended to replace &lt;code&gt;bundle show&lt;/code&gt; once Bundler 2 rolls around.&lt;/p&gt;

&lt;h4 id="bundle-issue"&gt;&lt;code&gt;bundle issue&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever been frustrated by a Bundler issue that wasn’t a crash? Have you found it difficult to figure out what information to put in a new GitHub issue? Well, no more! &lt;code&gt;bundle issue&lt;/code&gt; will gather all of the information present in the error template, on demand.&lt;/p&gt;

&lt;h4 id="bundle-add"&gt;&lt;code&gt;bundle add&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Bundler has long included the &lt;code&gt;bundle inject&lt;/code&gt; command, which has been a source of some confusion. &lt;code&gt;inject&lt;/code&gt; has always been intended to serve as plumbing for other tooling, doing a whole bunch of verification along with adding a new &lt;code&gt;gem&lt;/code&gt; line to the Gemfile. Due to popular demand, we’ve extracted that latter part out into the &lt;code&gt;bundle add&lt;/code&gt; command, making it easier than ever to automate adding dependencies to your Gemfile.&lt;/p&gt;

&lt;h4 id="bundle-pristine"&gt;&lt;code&gt;bundle pristine&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever accidentally edited an installed gem’s files and wished you had a way to undo that? Mirroring the &lt;code&gt;gem pristine&lt;/code&gt; command, Bundler now supports &lt;code&gt;bundle pristine&lt;/code&gt;, restoring all of the gems in your Gemfile to pristine condition.&lt;/p&gt;

&lt;h3 id="more-man-pages"&gt;More Man Pages&lt;/h3&gt;

&lt;p&gt;Documentation improvements are amongst my favorite contributions, and &lt;a href="https://github.com/feministy"&gt;Liz Abinate&lt;/a&gt; came through big for us this release. We now have man pages for every single Bundler command. This means that bundler.io will &lt;em&gt;also&lt;/em&gt; have documentation for all of the Bundler commands. We hope to do a better job of keeping our documentation up-to-date in the future, and this release is a great starting point for that effort.&lt;/p&gt;

&lt;h3 id="various-improvements"&gt;Various improvements&lt;/h3&gt;

&lt;p&gt;In addition to those larger additions, we made some smaller tweaks with the aim of smoothing and improving the overall experience of using Bundler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;bundle update&lt;/code&gt; will now print gems whose versions are regressing in yellow.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bundle inject&lt;/code&gt; has gained &lt;code&gt;--source&lt;/code&gt; and &lt;code&gt;--group&lt;/code&gt; options.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bundle config&lt;/code&gt; has a &lt;code&gt;--parseable&lt;/code&gt; option, suitable for use in scripts.&lt;/li&gt;
  &lt;li&gt;Resolver version conflicts will only list relevant dependencies.&lt;/li&gt;
  &lt;li&gt;When installing a gem fails, Bundler will print out the reason why that gem was being installed in the first place.&lt;/li&gt;
  &lt;li&gt;Bundler will let you know when a new version of itself is available. How meta.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bundle update&lt;/code&gt; works a lot better now when only unlocking a single gem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also fixed over 20 separate bugs, and you can read about every single one of them &lt;a href="https://github.com/bundler/bundler/blob/1-15-stable/CHANGELOG.md"&gt;in the Bundler 1.15 changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="how-to-upgrade"&gt;How To Upgrade&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gem install bundler&lt;/code&gt; to upgrade to the newest version of Bundler.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bundler 1.14: So many fixes</title>
    <link rel="alternate" href="http://bundler.io/blog/2017/03/28/bundler-1-14-so-many-fixes.html"/>
    <id>http://bundler.io/blog/2017/03/28/bundler-1-14-so-many-fixes.html</id>
    <published>2017-03-28T07:15:00+00:00</published>
    <updated>2017-06-09T15:01:36+00:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;h1 id="whats-new-in-bundler-114"&gt;What’s new in Bundler 1.14?&lt;/h1&gt;

&lt;p&gt;We somehow missed writing up an announcement when Bundler 1.14 was initially released, but several people kindly pointed out the problem. Just 48 days late, here’s what’s new in Bundler 1.14! In this feature release, we added several small features, and fixed a giant pile of bugs.&lt;/p&gt;

&lt;h3 id="conservative-updates"&gt;Conservative updates&lt;/h3&gt;

&lt;p&gt;Building on the previous &lt;a href="http://bundler.io/v1.13/whats_new.html#fine-controls-for-the-update-command"&gt;fine controls for the update command&lt;/a&gt;, the illustrious &lt;a href="https://github.com/chrismo"&gt;@chrismo&lt;/a&gt; worked his way through many gnarly possible usage combinations to implement the &lt;code&gt;update --conservative&lt;/code&gt; flag. Using the conservative flag allows &lt;code&gt;bundle update GEM&lt;/code&gt; to update the version of GEM, but prevents Bundler from updating the versions of any of the gems that GEM depends on. For a more in-depth discussion of why this is useful, check out the  &lt;a href="http://bundler.io/v1.14/man/bundle-update.1.html#OVERLAPPING-DEPENDENCIES"&gt;discussion of overlapping dependencies&lt;/a&gt; in the &lt;a href="http://bundler.io/v1.14/man/bundle-update.1.html"&gt;&lt;code&gt;update&lt;/code&gt; command man page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="checksum-validation"&gt;Checksum validation&lt;/h3&gt;

&lt;p&gt;As part of the &lt;a href="http://andre.arko.net/2014/03/28/the-new-rubygems-index-format/"&gt;compact index format&lt;/a&gt; provided by RubyGems.org, Bundler now has access to checksums for every .gem file. Starting with version 1.14, Bundler actively validates those checksums against downloaded .gem files before installing them. Hooray! 🎉&lt;/p&gt;

&lt;h3 id="improved-platform-support"&gt;Improved platform support&lt;/h3&gt;

&lt;p&gt;Courtesy of some intensive work by @segiddins, Bundler is getting better at handling applications that will be run on more than one platform, like both Unix and Windows. To start with, Bundler will now print a warning if your Gemfile includes any gems that will never be installed due to a &lt;code&gt;platform&lt;/code&gt; block. For gems that need to be compiled even though the author has uploaded a binary gem, the &lt;code&gt;force_ruby_platform&lt;/code&gt; config setting has you covered. Lastly, the new config setting &lt;code&gt;specific_platform&lt;/code&gt; tells Bundler to consider platforms during dependency resolution. This setting should significantly improve things for users installing a single bundle on more than one platform. We expect the &lt;code&gt;specific_platform&lt;/code&gt; setting to become the default behavior in Bundler 2.0.&lt;/p&gt;

&lt;h3 id="improved-required-ruby-versions"&gt;Improved required Ruby versions&lt;/h3&gt;

&lt;p&gt;Building on the support for Ruby and RubyGems version that was added in 1.13, Bundler 1.14 improves resolver error messages. If any gem conflicts with your Ruby or RubyGems version, the error message will now show both the conflicting dependencies and the chain of parent dependencies that led to the conflict.&lt;/p&gt;

&lt;h3 id="various-improvements"&gt;Various improvements&lt;/h3&gt;

&lt;p&gt;In addition to those larger additions, we made some smaller tweaks with the aim of smoothing and improving the overall experience of using Bundler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing gems using &lt;code&gt;sudo&lt;/code&gt; will now always prompt for a password, even if the sudo password is cached from an earlier command&lt;/li&gt;
  &lt;li&gt;The Gemfile method &lt;code&gt;platform&lt;/code&gt; now supports Ruby 2.5, allowing arguments like &lt;code&gt;:ruby_25&lt;/code&gt; or &lt;code&gt;:mri_25&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The “lockfile is missing dependencies” error (triggered by certain old lock files that were missing information) is no longer fatal. We now print instructions on how to repair the Gemfile, and install using one thread.&lt;/li&gt;
  &lt;li&gt;Running &lt;code&gt;require "bundler"&lt;/code&gt; is now about five times faster than it used to be.&lt;/li&gt;
  &lt;li&gt;Bundler now works when run by users without a home directory.&lt;/li&gt;
  &lt;li&gt;The output from &lt;code&gt;bundle env&lt;/code&gt; is now preformatted as Markdown for pasting into a GitHub issue.&lt;/li&gt;
  &lt;li&gt;After Bundler 2.0 is (eventually) released, Bundler 1.14 and greater will be able to automatically switch to Bundler 2.0+ for apps that need it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also fixed over 60 separate bugs, and you can read about every single one of them &lt;a href="https://github.com/bundler/bundler/blob/1-14-stable/CHANGELOG.md"&gt;in the Bundler 1.14 changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="how-to-upgrade"&gt;How To Upgrade&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gem install bundler&lt;/code&gt; to upgrade to the newest version of Bundler.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bundler 1.13: The one with steady improvements</title>
    <link rel="alternate" href="http://bundler.io/blog/2016/09/08/bundler-1-13.html"/>
    <id>http://bundler.io/blog/2016/09/08/bundler-1-13.html</id>
    <published>2016-09-08T23:00:00+00:00</published>
    <updated>2017-06-09T15:01:36+00:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;p&gt;Bundler 1.13 is out! It’s been a steady stream of improvements over the last four months, and we’re shipping some new features, some improved features, and some experimental features. Now that we’ve shipped all of these changes, we’re starting to work at full speed on the upcoming 1.14 and 2.0 releases. While you wait, read on for the changes in 1.13 and then give it a try!&lt;/p&gt;

&lt;h3 id="new-features"&gt;New features&lt;/h3&gt;

&lt;h4 id="support-for-requiredrubyversion-with-declared-ruby"&gt;Support for &lt;code&gt;required_ruby_version&lt;/code&gt; (with declared &lt;code&gt;ruby&lt;/code&gt;)&lt;/h4&gt;

&lt;p&gt;One very nice addition is that gems with a &lt;code&gt;required_ruby_version&lt;/code&gt; will now resolve correctly as long as your Gemfile contains a &lt;code&gt;ruby&lt;/code&gt; declaration. This change is the culmination of years worth of work, including the new compact index released in Bundler 1.12. In the future, we’re also going to support gems with required Ruby versions in Gemfiles that don’t declare a Ruby requirement. Because of existing features (like the Gemfile Ruby declaration), we’re having to do some mork work so that everything can coexist harmoniously. In the meantime, set a Ruby version and you’ll get the right gem versions to install on your Ruby.&lt;/p&gt;

&lt;h4 id="the-bundle-doctor-command"&gt;The &lt;code&gt;bundle doctor&lt;/code&gt; command&lt;/h4&gt;

&lt;p&gt;We’ve also added a &lt;code&gt;bundle doctor&lt;/code&gt; command, courtesy of &lt;a href="https://github.com/mistydemeo"&gt;@mistydemeo&lt;/a&gt;. Over time, the &lt;code&gt;doctor&lt;/code&gt; command will try to solve common problems. Today, it is capable of detecting gems that have been compiled against libraries that no longer exist. For example, if you use Bundler to install the &lt;code&gt;pg&lt;/code&gt; gem and then later run &lt;code&gt;brew upgrade postgres&lt;/code&gt;, the gem will stop working. We’ve never had a good way to explain (or even detect) this kind of problem before, and now we’re able to fix it for you automatically.&lt;/p&gt;

&lt;h4 id="add-options---add-platform-and---remove-platform-to-the-lock-command"&gt;Add options &lt;code&gt;--add-platform&lt;/code&gt; and &lt;code&gt;--remove-platform&lt;/code&gt; to the &lt;code&gt;lock&lt;/code&gt; command&lt;/h4&gt;

&lt;p&gt;In the past, the only way to resolve your Gemfile on a new platform (like &lt;code&gt;java&lt;/code&gt; or &lt;code&gt;mswin&lt;/code&gt;) was to run &lt;code&gt;bundle install&lt;/code&gt; on that platform. We’ve added explicit options to the &lt;code&gt;lock&lt;/code&gt; command to allow managing platforms. Platforms can be added using &lt;code&gt;bundle lock --add-platform NAME&lt;/code&gt;, and platforms can be removed using &lt;code&gt;bundle lock --remove-platform NAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This makes it possible to (for example) develop on Windows and deploy to a Unix server. However! (and this is a pretty big however), gems on different platforms can have completely different code. Run your test suite on whatever platform you will use in production—it’s the only way to be sure.&lt;/p&gt;

&lt;h3 id="improved-features"&gt;Improved features&lt;/h3&gt;

&lt;h4 id="auto-install-for-bundlerinline"&gt;Auto-install for &lt;code&gt;bundler/inline&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;When using &lt;code&gt;bundler/inline&lt;/code&gt;, gems are now automatically installed. This makes it ridiculously easy to create and distribute single-file scripts that depend on gems. Highly recommended.&lt;/p&gt;

&lt;h4 id="dramatic-resolver-optimizations"&gt;Dramatic resolver optimizations&lt;/h4&gt;

&lt;p&gt;The resolver has been fine-tuned. It allocates less objects, uses less memory, needs less GC time, and is all-around better. It is now able to find usable Gem versions noticably faster. In many cases, the improvement was about 4x. For one especially dramatic Gemfile, Bundler now runs 100x faster than it did before.&lt;/p&gt;

&lt;h4 id="better-faster-exec"&gt;Better faster &lt;code&gt;exec&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The new &lt;code&gt;exec&lt;/code&gt; command (added in v1.12) switched from always calling &lt;code&gt;exec&lt;/code&gt; to calling &lt;code&gt;load&lt;/code&gt; instead if possible. In version 1.13 we added a way to turn it off: &lt;code&gt;bundle config exec_disable_load true&lt;/code&gt;. We also dramatically improved it process, adding support for JRuby, and setting process titles the same way they used to be set.&lt;/p&gt;

&lt;h4 id="improved-usage-of-the-compact-index"&gt;Improved usage of the compact index&lt;/h4&gt;

&lt;p&gt;We launched &lt;a href="http://andre.arko.net/2014/03/28/the-new-rubygems-index-format/"&gt;the compact index&lt;/a&gt; in v1.12. In this version, we’ve sped things up by using persistent HTTP for more than one request, fixed printing dots to indicate progress, and added support for legacy gems with capitalized names and users without a home directory.&lt;/p&gt;

&lt;h3 id="experimental-features"&gt;Experimental features&lt;/h3&gt;

&lt;p&gt;This version also contains three experimental features, disabled by default: a plugin system, and version locking for Bundler itself.&lt;/p&gt;

&lt;h4 id="experimental-plugin-system"&gt;Experimental plugin system&lt;/h4&gt;

&lt;p&gt;For a long time now, we’ve supported “command” plugins the same way that &lt;code&gt;git&lt;/code&gt; does: if there is a command named &lt;code&gt;bundle-foo&lt;/code&gt;, then Bundler will run it when you execute &lt;code&gt;bundle foo&lt;/code&gt;. The experimental plugin system builds on top of that, providing a way to create new Bundler commands that hook into the Bundler CLI internals. The plugin system also supports “source” plugins, which means it should be possible to use gems from Subversion, Mercurial, S3, or anything else you can think of. In addition to source plugins, we’ve started adding new “lifecycle” hooks. That means plugins will be able to hook in and run their own code before, during, or after the install or update process.&lt;/p&gt;

&lt;h4 id="experimental-bundler-version-locking"&gt;Experimental Bundler version locking&lt;/h4&gt;

&lt;p&gt;Someday, Bundler 2.0 is going to break backwards compatibility. When that happens, we’re going to need a way for applications that use Bundler 1.x to keep working. We’re also going to need a way for applications that use Bundler 2.x to work in the first place. As a first step towards that glorious future, we’ve built a feature that allows Bundler to automatically run the version of Bundler locked in the &lt;code&gt;Gemfile.lock&lt;/code&gt;. It adds an additional level of complexity, though, so we’ve disabling it by default in this version of Bundler. If you want to opt in, and have Bundler 1.13 automatically download, install, and run an older version of Bundler, here’s how it works:&lt;/p&gt;

&lt;p&gt;First, export the environment variable &lt;code&gt;BUNDLE_ENABLE_TRAMPOLINE&lt;/code&gt;. In the Bash shell, that means running &lt;code&gt;export BUNDLE_ENABLE_TRAMPOLINE=true&lt;/code&gt;. Then, run &lt;code&gt;bundle install&lt;/code&gt; and &lt;code&gt;bundle exec&lt;/code&gt; as usual. You should notice that Bundler will automatically switch to the version of Bundler that is saved into the &lt;code&gt;Gemfile.lock&lt;/code&gt;. To update the version of Bundler saved in the lockfile, run &lt;code&gt;bundle update --bundler&lt;/code&gt;. That will overwrite the Bundler version in the lock with the newest version of Bundler installed on your machine.&lt;/p&gt;

&lt;h4 id="experimental-conservative-updates"&gt;Experimental conservative updates&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;bundle update&lt;/code&gt; received some new options to support conservative updates: &lt;code&gt;--patch&lt;/code&gt; and &lt;code&gt;--minor&lt;/code&gt;. “Conservative” meaning it will sort all available versions to prefer the latest patch releases from the current version, then the latest minor releases and then the latest major releases. These aren’t documented or formally supported yet while we allow the community some opportunity to weigh in on how these options should work. &lt;a href="https://github.com/bundler/bundler-features/issues/122"&gt;Join the discussion and give us your 2 cents so we can lock this in for 1.14&lt;/a&gt;. There’s even some outstanding issues you can contribute to!&lt;/p&gt;

&lt;h4 id="feedback-for-experimental-features"&gt;Feedback for experimental features&lt;/h4&gt;

&lt;p&gt;These features are a really big deal, and we want to launch them at the same level of polish and stability that you’re used to getting from Bundler. We’ll get there, and when we do these features will be turned on by default. In the meantime, if you’d like to try them out, that would be awesome. We’d love to &lt;a href="https://github.com/bundler/bundler/issues/new"&gt;hear your feedback&lt;/a&gt;. &amp;lt;3&lt;/p&gt;

&lt;h3 id="how-to-upgrade"&gt;How To Upgrade&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gem install bundler&lt;/code&gt; to upgrade to the newest version of Bundler.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A New Bundler Website</title>
    <link rel="alternate" href="http://bundler.io/blog/2016/07/10/bundler-1-13-and-redesigned-bundler-io.html"/>
    <id>http://bundler.io/blog/2016/07/10/bundler-1-13-and-redesigned-bundler-io.html</id>
    <published>2016-07-10T21:44:00+00:00</published>
    <updated>2017-06-09T15:01:36+00:00</updated>
    <author>
      <name>Jakub Kruczek</name>
    </author>
    <content type="html">&lt;p&gt;Announcing… the new Bundler website! As part of Google Summer of Code 2016, Bundler has a new, prettier, and better website. The most visible changes are a completely new design and color scheme. In addition, the entire site is now responsive and easy to read on mobile devices using the &lt;a href="http://getbootstrap.com/"&gt;Bootstrap framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="/docs.html"&gt;new Docs page&lt;/a&gt; provides a table of contents for the entire site, allowing you to choose between guides, command reference pages, and changelogs for each version. On each command page (e.g. &lt;a href="/man/bundle-install.1.html"&gt;bundle install&lt;/a&gt;), there
is a new sidebar, allowing navigation not just between commands but also to previous versions of the same command.&lt;/p&gt;

&lt;p&gt;There are also two new guides to go with the new website: &lt;a href="/guides/using_bundler_in_application.html"&gt;Using Bundler In Applications&lt;/a&gt; written by &lt;a href="https://github.com/kruczjak"&gt;me&lt;/a&gt;, and &lt;a href="/guides/using_bundler_in_application.html"&gt;Developing a RubyGem using Bundler&lt;/a&gt; by Ryan Bigg (&lt;a href="https://github.com/radar"&gt;@radar&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The new site also includes some more improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Command pages are now built from the Bundler repository instead of hand-written (where possible)&lt;/li&gt;
  &lt;li&gt;Commits to the master branch of &lt;a href="https://github.com/bundler/bundler-site"&gt;bundler-site&lt;/a&gt; are now auto-deployed (via Travis)&lt;/li&gt;
  &lt;li&gt;Middleman has been updated to latest version&lt;/li&gt;
  &lt;li&gt;Every header in the guides and commands pages now has anchor links for navigation and reference&lt;/li&gt;
  &lt;li&gt;The site now supports multiple translations (although no translations have been completed yet)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many thanks to Amy (&lt;a href="https://github.com/sailorhg"&gt;@sailorhg&lt;/a&gt;), André (&lt;a href="https://github.com/indirect"&gt;@indirect&lt;/a&gt;) and Samuel (&lt;a href="https://github.com/segiddins"&gt;@segiddins&lt;/a&gt;). Without their help, it wouldn’t have been
possible.&lt;/p&gt;

&lt;p&gt;Enjoy :D&lt;/p&gt;

&lt;p&gt;~ Jakub (&lt;a href="https://github.com/kruczjak"&gt;@kruczjak&lt;/a&gt;)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The new index format, Fastly, and Bundler 1.12</title>
    <link rel="alternate" href="http://bundler.io/blog/2016/04/28/the-new-index-format-fastly-and-bundler-1-12.html"/>
    <id>http://bundler.io/blog/2016/04/28/the-new-index-format-fastly-and-bundler-1-12.html</id>
    <published>2016-04-28T23:00:00+00:00</published>
    <updated>2017-06-09T15:01:36+00:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;p&gt;A new version of Bundler has arrived! With 1.12, we’re shipping one huge change and several smaller changes—the short version is that Bundler is getting faster and more capable.&lt;/p&gt;

&lt;h2 id="the-new-index-format"&gt;The new index format&lt;/h2&gt;

&lt;p&gt;The biggest change landing in this release is &lt;a href="http://andre.arko.net/2014/03/28/the-new-rubygems-index-format/"&gt;the fabled new index format&lt;/a&gt;, which has been in development for over two years. It has required significant work on Bundler and the Bundler API webapp, but it also lays the foundation for years of speed, stability, and security. In addition to the speed increases provided by the format itself, we’re also serving the new index directly from the Fastly CDN. That means Bundler will be able to talk to a server located nearby, no matter where you are in the world. We expect that to make a huge difference, especially in Oceania and Africa. 🎉&lt;/p&gt;

&lt;h2 id="exec-performance"&gt;&lt;code&gt;exec&lt;/code&gt; performance&lt;/h2&gt;

&lt;p&gt;On top of the new index, we also made specific improvements to the performance of &lt;code&gt;bundle exec&lt;/code&gt;. It now avoids running &lt;code&gt;Kernel.exec&lt;/code&gt; if possible, and only evaluates the &lt;code&gt;Gemfile&lt;/code&gt; one time, instead of twice. Added together, these changes should speed up any &lt;code&gt;bundle exec&lt;/code&gt; command by around 0.25 seconds!&lt;/p&gt;

&lt;h2 id="outdated-by-version-size"&gt;&lt;code&gt;outdated&lt;/code&gt; by version size&lt;/h2&gt;

&lt;p&gt;Another new feature is the ability to run &lt;code&gt;bundle outdated&lt;/code&gt; with the flags &lt;code&gt;--major&lt;/code&gt;, &lt;code&gt;--minor&lt;/code&gt;, and &lt;code&gt;--patch&lt;/code&gt;. Using those flags, you can limit Bundler to only show you new versions that are both allowed by your &lt;code&gt;Gemfile&lt;/code&gt; and also meet the criteria of only changing the major, minor, or patch version of the gem. You can combine them to get only minor and patch updates, or even only major and patch updates (but I have no idea why you would want to do that).&lt;/p&gt;

&lt;h2 id="ruby-versions"&gt;Ruby versions&lt;/h2&gt;

&lt;p&gt;Our final big feature is support for locking Ruby versions! That means that you can put &lt;code&gt;ruby "~&amp;gt; 2.3"&lt;/code&gt; in your &lt;code&gt;Gemfile&lt;/code&gt;, and Bundler will save your exact Ruby version (say, 2.3.1) into your &lt;code&gt;Gemfile.lock&lt;/code&gt;. You can update the ruby version by running &lt;code&gt;bundle update --ruby&lt;/code&gt;, and that will update the lock to match your current version of Ruby the same way Bundler currently updates gem versions.&lt;/p&gt;

&lt;p&gt;Minor changes include adding support for Ruby 2.4, RubyGems 2.6.3, and support for the Ruby 2.3 feature of freezing all string literals.&lt;/p&gt;

&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;

&lt;p&gt;We added a bunch of other small tweaks, features, and bugfixes, so be sure to check out &lt;a href="https://github.com/bundler/bundler/blob/master/CHANGELOG.md"&gt;the changelog&lt;/a&gt; for the entire list!&lt;/p&gt;

&lt;h2 id="updating"&gt;Updating&lt;/h2&gt;

&lt;p&gt;To get the newest version of Bundler, run &lt;code&gt;gem install bundler&lt;/code&gt;. If you have any issues, please check out our &lt;a href="https://github.com/bundler/bundler/blob/master/ISSUES.md"&gt;issues guide&lt;/a&gt; and let us know!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Version 1.11 released</title>
    <link rel="alternate" href="http://bundler.io/blog/2015/12/12/version-1-11-released.html"/>
    <id>http://bundler.io/blog/2015/12/12/version-1-11-released.html</id>
    <published>2015-12-12T19:00:00+00:00</published>
    <updated>2017-06-09T15:01:36+00:00</updated>
    <author>
      <name>Samuel Giddins</name>
    </author>
    <content type="html">&lt;p&gt;Bundler 1.11 is here! Six and a half months after the last big release, we’re
finally ready to ship 1.11.&lt;/p&gt;

&lt;p&gt;I know it’s been a while, but there’s a pretty good reason for that. Over the
summer, the team was busy supervising &lt;em&gt;four&lt;/em&gt; Google Summer of Code students:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We made a significant amount of progress on the new compact gem index, which
ought to ship in 1.12 in the near future.&lt;/li&gt;
  &lt;li&gt;We improved the Bundler website and online documentation.&lt;/li&gt;
  &lt;li&gt;We’ve created a solid base for Bundler 2.0.&lt;/li&gt;
  &lt;li&gt;We prototyped a new plugin system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, the Bundler Core team has spent a lot of time focusing on the
development experience of bundler itself. The bundler codebase is over five
years old, and contains code from over 400 contributors. That can make it
rather daunting to start contributing, and also makes it hard to ensure that
all of the code in bundler is up to the same standards (and is fit to last for
the next five years!). In order to make things more consistent, we’ve
introduced RuboCop (and thus a style guide), we’ve instituted a build bot to
ensure that &lt;code&gt;master&lt;/code&gt; is never failing, and have decided to subject 100% of the
new code introduced to code review. This is a big step forward, and lets me
confidently say that this will be our best release yet!&lt;/p&gt;

&lt;p&gt;That out of the way, what’s actually in this long-awaited release?&lt;/p&gt;

&lt;h3 id="new-features"&gt;New features&lt;/h3&gt;

&lt;p&gt;First up, we’ve combed through a few years worth of bundler issues, and have
improved the error messaging for every single one of them. Our goal is to never
show an exception with a backtrace, and instead present a friendly and helpful
error message when things go awry – and we’re now pretty close to that.&lt;/p&gt;

&lt;p&gt;The dependency resolver has also seen a few updates. Continuing the theme of
improved errors, version conflicts will now do a better job of reporting what
versions of every gem have been activated, making it even easier to figure out
the best way to resolve said conflict. Additionally, resolution has been sped up
by over 25x in pathological cases. That’s a pretty nice win.&lt;/p&gt;

&lt;p&gt;Finally, we’ve laid the groundwork for resolving gems based on the current
version of Ruby.  Once the new index is rolled out, Bundler will make sure to
choose gems whose &lt;code&gt;required_ruby_version&lt;/code&gt; matches the Ruby you are running on.&lt;/p&gt;

&lt;h3 id="bugfixes"&gt;Bugfixes&lt;/h3&gt;

&lt;p&gt;The real meat of this release comes in the bugfix section, however. Across
almost four hundred commits, we’ve squashed upwards of fifty unique bugs.
Meaning this version of bundler should be the fastest, most stable version we’ve
ever released.&lt;/p&gt;

&lt;h3 id="whats-next"&gt;What’s Next&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, this long gap between releases doesn’t mean we’re
slowing down development – quite the opposite, in fact! We’re actively working
on bundler 1.12 and 2.0 &lt;em&gt;at this very moment&lt;/em&gt;, and are incredibly exited to get
the new index into people’s hands as fast as we possibly can.&lt;/p&gt;

&lt;h4 id="updating"&gt;Updating&lt;/h4&gt;

&lt;p&gt;To install the last release of Bundler, you can run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ [sudo] gem install bundler
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For all the details, don’t miss the
&lt;a href="https://github.com/bundler/bundler/blob/v1.11.0/CHANGELOG.md#1110-2015-12-12"&gt;Changelog&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
</feed>
