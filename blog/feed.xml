<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bundler Blog</title>
  <subtitle>The latest news on Bundler</subtitle>
  <id>http://bundler.io/blog</id>
  <link href="http://bundler.io/blog"/>
  <link href="http://bundler.io/blog/feed.xml" rel="self"/>
  <updated>2018-03-09T15:01:00+00:00</updated>
  <author>
    <name>The Bundler Team</name>
  </author>
  <entry>
    <title>February 2018 Bundler Update</title>
    <link rel="alternate" href="http://bundler.io/blog/2018/03/09/february-bundler-update.html"/>
    <id>http://bundler.io/blog/2018/03/09/february-bundler-update.html</id>
    <published>2018-03-09T15:01:00+00:00</published>
    <updated>2018-03-16T19:08:04+00:00</updated>
    <author>
      <name>Stephanie Morillo</name>
    </author>
    <content type="html">&lt;p&gt;Welcome to the Bundler monthly update!&lt;/p&gt;

&lt;p&gt;Bundler saw some fixes in February thanks to contributors &lt;a href="https://github.com/nholden"&gt;@nholden&lt;/a&gt;, &lt;a href="https://github.com/voxik"&gt;@voxik&lt;/a&gt;, &lt;a href="https://github.com/cpgo"&gt;@cpgo&lt;/a&gt;,  &lt;a href="https://github.com/deivid-rodriguez"&gt;@deivid-rodriguez&lt;/a&gt;, and &lt;a href="https://github.com/alyssais"&gt;@alyssais&lt;/a&gt;. Fixes this month included &lt;a href="https://github.com/bundler/bundler/pull/6288"&gt;a fix for certain instances of the “perhaps the lockfile is corrupted?” error&lt;/a&gt;, as well as &lt;a href="https://github.com/bundler/bundler/pull/6283"&gt;clear enforcement steps for the code of conduct&lt;/a&gt;. We also received &lt;a href="https://github.com/bundler/rfcs/pull/10"&gt;an awesome proposal&lt;/a&gt; to give the &lt;code&gt;add&lt;/code&gt; command superpowers, and add a &lt;code&gt;remove&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This month, Bundler gained 23 new commits, contributed by 8 authors. There were 291 additions and 59 deletions across 50 files.&lt;/p&gt;

&lt;p&gt;Interested in contributing to Bundler? We always welcome contributions in the forms of triaging bugs, adding new features, writing docs, and engaging with the wider community. Visit the &lt;a href="https://github.com/bundler/bundler/blob/master/doc/contributing/README.md"&gt;Bundler Contributor Guidelines&lt;/a&gt; on GitHub to get started.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making gem development a little better</title>
    <link rel="alternate" href="http://bundler.io/blog/2018/01/17/making-gem-development-a-little-better.html"/>
    <id>http://bundler.io/blog/2018/01/17/making-gem-development-a-little-better.html</id>
    <published>2018-01-17T15:01:00+00:00</published>
    <updated>2018-03-16T19:08:04+00:00</updated>
    <author>
      <name>Hiren Mistry</name>
    </author>
    <content type="html">&lt;p&gt;You may have experienced this before: you’re excited about a gem, and want to contribute to its development. You clone the gem repo and run &lt;code&gt;bundle install&lt;/code&gt; only to see the horror of installation issues or a failing test suite. What to do? Do you debug this unsure of how deep the rabbit hole goes, or perhaps leave it for another day as you’re short on time?&lt;/p&gt;

&lt;p&gt;Recently &lt;a href="https://github.com/deivid-rodriguez"&gt;David Rodriguez&lt;/a&gt; brought up the issue and explained one way to prevent this: by having gem repositories lock versions of gem dependencies like we do in app development. The team listened to his proposal and reconsidered the original motivation behind not locking versions of gem dependencies, the impact to gem developers, and whether those reasons were still valid today.&lt;/p&gt;

&lt;p&gt;Starting with Bundler 1.16, the default for a new gem template created by Bundler no longer adds &lt;code&gt;Gemfile.lock&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt;, thereby allowing the lock file to be committed into the Git repository. Locking the versions of gem dependencies lets gem developers install a known working setup across different systems for development and save time by not having to debug broken installations. With a little CI configuration, gems can still be tested against new version dependencies (see CI recommendations below). We believe gem developers and the OSS community can benefit more by reducing hurdles for contributors. Some gem authors like Rails and Devise have been checking in the lock file into Git for some time now.&lt;/p&gt;

&lt;p&gt;The change only applies to new gems created using Bundler by running &lt;code&gt;bundle gem&lt;/code&gt; to create a new gem skeleton. Bundler will not change the lock file’s presence in &lt;code&gt;.gitignore&lt;/code&gt; for existing gems.&lt;/p&gt;

&lt;p&gt;We’d like to thank David for bringing this issue to our attention and implementing the changes to Bundler!&lt;/p&gt;

&lt;h3 id="ci-recommendations"&gt;CI recommendations&lt;/h3&gt;

&lt;p&gt;There are (at least) two ways to ensure the gem is still tested against the latest versions of dependencies in the CI, even after the &lt;code&gt;Gemfile.lock&lt;/code&gt; is checked in to the gem repo.&lt;/p&gt;

&lt;h4 id="option-1-delete-the-lockfile-when-testing"&gt;Option 1: Delete the lockfile when testing&lt;/h4&gt;

&lt;p&gt;One way is to delete the lockfile before running the test suite. This will test the build against the latest version of the gem dependencies, giving you a preview of what your users will experience when they install the gem. The easiest way to do this is to add one line to &lt;code&gt;travis.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="ss"&gt;before_install: &lt;/span&gt;&lt;span class="s2"&gt;"rm Gemfile.lock"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means the CI only runs with the latest dependencies, and so the results may not match what gem developers see on their local machines. You can work around this problem by running the tests twice or setting up a Travis build matrix, to see test results for both, with and without a lockfile.&lt;/p&gt;

&lt;h4 id="option-2-let-a-bot-handle-it"&gt;Option 2: Let a bot handle it&lt;/h4&gt;

&lt;p&gt;The easiest way to make sure new versions are tested with the gem is to ask a friendly bot to update the &lt;code&gt;Gemfile.lock&lt;/code&gt; and open a PR anytime one of the dependencies release a new version. Friendly bot options include &lt;a href="https://dependabot.com"&gt;Dependabot&lt;/a&gt; (by Bundler contributor &lt;a href="https://github.com/greysteil"&gt;@greysteil&lt;/a&gt;), &lt;a href="https://depfu.com"&gt;Depfu&lt;/a&gt;, and others. Having a separate PR for every version bump makes it easy to tell which gems and versions caused failures, if any. They also make it easy to update a version in the lockfile, secure in the knowledge that the tests have already passed with the new version.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Monthly update for December and yearly update for 2017</title>
    <link rel="alternate" href="http://bundler.io/blog/2018/01/08/monthly-update-for-december-and-yearly-update-for-2017.html"/>
    <id>http://bundler.io/blog/2018/01/08/monthly-update-for-december-and-yearly-update-for-2017.html</id>
    <published>2018-01-08T17:09:00+00:00</published>
    <updated>2018-03-16T19:08:04+00:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;p&gt;Welcome to the Bundler monthly (and yearly) update! We’ve been writing monthly updates about Bundler for several years as part of the &lt;a href="https://rubytogether.org/news"&gt;Ruby Together monthly updates&lt;/a&gt;, and finally realized that we should be posting those monthly updates here, as well. Here’s to many more monthly updates to come!&lt;/p&gt;

&lt;p&gt;As you may have noticed, &lt;a href="https://www.ruby-lang.org/en/news/2017/12/25/ruby-2-5-0-released/"&gt;Bundler didn’t end up shipping with Ruby 2.5&lt;/a&gt;. The Ruby language core team has yet to announce why they decided to remove Bundler a few hours before Ruby 2.5 was released on Christmas Day. Hopefully, we’ll find out the story there soon.&lt;/p&gt;

&lt;p&gt;In the meantime, Bundler 1.16.1 has been released, with fixes or workarounds for all known issues. If you were waiting to upgrade to version 1.16, give it a try now! If you’re still seeing issues on version 1.16.1, please &lt;a href="https://github.com/bundler/bundler/blob/master/ISSUES.md"&gt;let us know!&lt;/a&gt; We care a lot about fixing bugs and maintaining backwards compatibility, but we need to hear from users in order to know when bugs have crept in. &amp;lt;3&lt;/p&gt;

&lt;p&gt;In December, Bundler gained 59 new commits, contributed by 8 authors. There were 419 additions and 301 deletions across 36 files.&lt;/p&gt;

&lt;p&gt;In 2017, Bundler gained two new maintainers, &lt;a href="https://twitter.com/0xcolby"&gt;Colby Swandale&lt;/a&gt; and &lt;a href="https://twitter.com/hsbt"&gt;hsbt&lt;/a&gt;. We shipped 21 releases total, which included 3 feature releases. Those releases included 1,392 commits, by 31 authors, with 21,892 additions and 5,860 deletions across 1,140 changed files.&lt;/p&gt;

&lt;p&gt;Thanks especially to Bundler’s new contributors in 2017: Abu Nashir, Adam Wanninger, Adrian Gomez, Alessandro Dal Grande, Alex Taylor, Artyom Khramov, Ashish Sehra, Atsushi Yamamoto, Brian Christian, Daniel P. Clark, Daniel Ritz, Daniel Trierweiler, David Radcliffe, Dennis Suratna, Elia Schito, emsk, Eric Boehs, Erik Johnson, fotanus, Frederico, Frederico Bittencourt, Glenn Espinosa, Greg Werbin, Grey Baker, HippoDippo, Igor Bozato, Ivan Kuchin, Jack LaBarba, Jan Krutisch, Jared Kauppila, Jonathan Pike, Juan Barreneche, Julian Nadeau, Justin Myers, Kaycee, Keiji Yoshimi, Kerri Miller, leslie.wen, Mal Graty, Michael Deering, Michael Pitman, mpd, Noah Kantrowitz, Nobuyoshi Nakada, okkez, Olle Jonsson, Patricia Arbona, Paul Nikitochkin, Piotr Kuczynski, robcole, Robert Soly, Sebastian Nowak, Shayon Mukherjee, Stefan Sedich, Stephanie Morillo, Tejas Bubane, Tristan Hill, Urabe, Shyouhei, Wade Tandy, Will Jordan, and Zach Ahn.&lt;/p&gt;

&lt;p&gt;Until next month,&lt;br /&gt;
André and the Bundler team&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bundler 1.16: 2.0 Is So Close!</title>
    <link rel="alternate" href="http://bundler.io/blog/2017/10/31/bundler-1-16.html"/>
    <id>http://bundler.io/blog/2017/10/31/bundler-1-16.html</id>
    <published>2017-10-31T19:50:00+00:00</published>
    <updated>2018-03-16T19:08:04+00:00</updated>
    <author>
      <name>Samuel Giddins</name>
    </author>
    <content type="html">&lt;h1 id="whats-new-in-bundler-116"&gt;What’s new in Bundler 1.16?&lt;/h1&gt;

&lt;p&gt;A short summer after the performance-focused Bundler 1.15 release, we’ve shipped 1.16. Before we get to the list of changes, we want to share a very exciting announcement: Bundler 2.0 is right around the corner! We anticipate that v1.16 will be the last 1.x release, and details about the transition to 2.0 can be found below.&lt;/p&gt;

&lt;h3 id="improved-resolver"&gt;Improved Resolver&lt;/h3&gt;

&lt;p&gt;Thanks to the heroic efforts of &lt;a href="https://github.com/greysteil"&gt;Grey Baker&lt;/a&gt;, the Molinillo library Bundler uses for dependency resolution has once again been overhauled. By replacing the heuristic-focused “swapping” algorithm with one that can consider groups of gems at once, Grey managed to eliminate many bugs around dependency resolution, all while making resolution faster than ever before.&lt;/p&gt;

&lt;h3 id="speed"&gt;Speed&lt;/h3&gt;

&lt;p&gt;Following on the heels of the speed boosts in 1.15, we’ve continued to make the performance of Bundler a top priority. We’ve managed to reduce the number of times a Gemfile needs to be &lt;code&gt;eval&lt;/code&gt;ed when running &lt;code&gt;bundle install&lt;/code&gt;. Additionally, running &lt;code&gt;bundle install&lt;/code&gt; when no installation needs to be done is several times faster, bringing it within a few hundred ms of &lt;code&gt;bundle check&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="various-improvements"&gt;Various improvements&lt;/h3&gt;

&lt;p&gt;In addition to those larger additions, we made some smaller tweaks with the aim of smoothing and improving the overall experience of using Bundler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;bundle pristine&lt;/code&gt; will now allow passing a list of gems to pristine&lt;/li&gt;
  &lt;li&gt;gemfiles are evaluated one fewer time when running &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also fixed over 20 separate bugs, and you can read about every single one of them &lt;a href="https://github.com/bundler/bundler/blob/1-16-stable/CHANGELOG.md"&gt;in the Bundler 1.16 changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="kicking-off-the-transition-to-bundler-2"&gt;Kicking off the transition to Bundler 2&lt;/h3&gt;

&lt;p&gt;As this announcement is being written, Bundler 2 has landed on the &lt;code&gt;master&lt;/code&gt; branch. We anticipate having the first pre-release of 2.0 available on RubyGems soon. However! (and this is a big however), the Bundler team is committed to making the transition from Bundler 1 to Bundler 2 as smooth as possible. No one will be forced to upgrade to Bundler 2, and existing projects will be able to continue using Bundler 1 until they decide that switching to Bundler 2 is worth it.&lt;/p&gt;

&lt;p&gt;On the other hand, for those of you chomping at the bit to get ready, we have good news. Bundler 1.16 contains our current slate of changes for 2.0, but disabled behind feature flags. This also means that 1.16 has intimate knowledge of the parts of Bundler that will be changing, and by setting the &lt;code&gt;BUNDLE_MAJOR_DEPRECATIONS&lt;/code&gt; environment variable (or the &lt;code&gt;major_deprecations&lt;/code&gt; config setting), Bundler 1.16 will let you know if you’re relying on behavior that will change in Bundler 2. If you want to try it out, you can enable the changes that will ship in 2.0, and follow the deprecation guides to migrate to the future behavior today.&lt;/p&gt;

&lt;p&gt;In future blog posts, we’ll introduce the philosophy of Bundler 2, explain the reasons behind each of the breaking changes we made, and provide a detailed migration guide for those of you who prefer stable, documented releases. :)&lt;/p&gt;

&lt;h3 id="how-to-upgrade-to-116"&gt;How To Upgrade To 1.16&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gem install bundler&lt;/code&gt; to upgrade to the newest version of Bundler.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bundler 1.15: Bundle Oh So Fast</title>
    <link rel="alternate" href="http://bundler.io/blog/2017/05/19/bundler-1-15-bundle-oh-so-fast.html"/>
    <id>http://bundler.io/blog/2017/05/19/bundler-1-15-bundle-oh-so-fast.html</id>
    <published>2017-05-19T12:00:00+00:00</published>
    <updated>2018-03-16T19:08:04+00:00</updated>
    <author>
      <name>Samuel Giddins</name>
    </author>
    <content type="html">&lt;h1 id="whats-new-in-bundler-115"&gt;What’s new in Bundler 1.15?&lt;/h1&gt;

&lt;p&gt;Hot on the heels of the many small fixes in Bundler 1.14, we’re pushing out 1.15. The list of changes is much shorter, but we think you’re going to love it all the same, since this time around we’ve focused on making Bundler a whole heck of a lot faster.&lt;/p&gt;

&lt;h3 id="speed"&gt;Speed&lt;/h3&gt;

&lt;p&gt;Due to &lt;a href="https://github.com/jules2689"&gt;Julian Nadeau&lt;/a&gt;’s prompting, we’ve made loading up Bundler fast. Up to a half a second faster than before, on every &lt;code&gt;bundle exec&lt;/code&gt;, &lt;code&gt;require "bundler/setup"&lt;/code&gt;, &lt;code&gt;Bundler.setup&lt;/code&gt;, and &lt;code&gt;Bundler.require&lt;/code&gt;. This is going to save developers a lot of time, given how often we tend to run things!&lt;/p&gt;

&lt;p&gt;The mere act of initializing a Gemfile has been sped up by turning array lookups into hash table accesses, making expensive comparisons lazy, and generally avoiding object allocation.&lt;/p&gt;

&lt;p&gt;We also now only validate git gems when they are first downloaded &amp;amp; installed, meaning projects with many git gems won’t be validating each and every one of them over and over again.&lt;/p&gt;

&lt;p&gt;Finally, we’ve managed to avoid evaluating the full &lt;code&gt;.gemspec&lt;/code&gt; of all the gems that are being loaded when running on RubyGems 2.5 and above. Taking advantage of a feature called stub specifications, Bundler is able to grab all of the information it needs from the first two lines of a serialized gemspec file, without evaluating the rest. This represents a massive time savings for very large Gemfiles.&lt;/p&gt;

&lt;h3 id="new-commands"&gt;New Commands&lt;/h3&gt;

&lt;p&gt;We’ve added 4 new commands that have been on our wish list for a long time.&lt;/p&gt;

&lt;h4 id="bundle-info"&gt;&lt;code&gt;bundle info&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This command prints out basic information about the given gem, and is intended to replace &lt;code&gt;bundle show&lt;/code&gt; once Bundler 2 rolls around.&lt;/p&gt;

&lt;h4 id="bundle-issue"&gt;&lt;code&gt;bundle issue&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever been frustrated by a Bundler issue that wasn’t a crash? Have you found it difficult to figure out what information to put in a new GitHub issue? Well, no more! &lt;code&gt;bundle issue&lt;/code&gt; will gather all of the information present in the error template, on demand.&lt;/p&gt;

&lt;h4 id="bundle-add"&gt;&lt;code&gt;bundle add&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Bundler has long included the &lt;code&gt;bundle inject&lt;/code&gt; command, which has been a source of some confusion. &lt;code&gt;inject&lt;/code&gt; has always been intended to serve as plumbing for other tooling, doing a whole bunch of verification along with adding a new &lt;code&gt;gem&lt;/code&gt; line to the Gemfile. Due to popular demand, we’ve extracted that latter part out into the &lt;code&gt;bundle add&lt;/code&gt; command, making it easier than ever to automate adding dependencies to your Gemfile.&lt;/p&gt;

&lt;h4 id="bundle-pristine"&gt;&lt;code&gt;bundle pristine&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever accidentally edited an installed gem’s files and wished you had a way to undo that? Mirroring the &lt;code&gt;gem pristine&lt;/code&gt; command, Bundler now supports &lt;code&gt;bundle pristine&lt;/code&gt;, restoring all of the gems in your Gemfile to pristine condition.&lt;/p&gt;

&lt;h3 id="more-man-pages"&gt;More Man Pages&lt;/h3&gt;

&lt;p&gt;Documentation improvements are amongst my favorite contributions, and &lt;a href="https://github.com/feministy"&gt;Liz Abinate&lt;/a&gt; came through big for us this release. We now have man pages for every single Bundler command. This means that bundler.io will &lt;em&gt;also&lt;/em&gt; have documentation for all of the Bundler commands. We hope to do a better job of keeping our documentation up-to-date in the future, and this release is a great starting point for that effort.&lt;/p&gt;

&lt;h3 id="various-improvements"&gt;Various improvements&lt;/h3&gt;

&lt;p&gt;In addition to those larger additions, we made some smaller tweaks with the aim of smoothing and improving the overall experience of using Bundler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;bundle update&lt;/code&gt; will now print gems whose versions are regressing in yellow.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bundle inject&lt;/code&gt; has gained &lt;code&gt;--source&lt;/code&gt; and &lt;code&gt;--group&lt;/code&gt; options.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bundle config&lt;/code&gt; has a &lt;code&gt;--parseable&lt;/code&gt; option, suitable for use in scripts.&lt;/li&gt;
  &lt;li&gt;Resolver version conflicts will only list relevant dependencies.&lt;/li&gt;
  &lt;li&gt;When installing a gem fails, Bundler will print out the reason why that gem was being installed in the first place.&lt;/li&gt;
  &lt;li&gt;Bundler will let you know when a new version of itself is available. How meta.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bundle update&lt;/code&gt; works a lot better now when only unlocking a single gem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also fixed over 20 separate bugs, and you can read about every single one of them &lt;a href="https://github.com/bundler/bundler/blob/1-15-stable/CHANGELOG.md"&gt;in the Bundler 1.15 changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="how-to-upgrade"&gt;How To Upgrade&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gem install bundler&lt;/code&gt; to upgrade to the newest version of Bundler.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bundler 1.14: So many fixes</title>
    <link rel="alternate" href="http://bundler.io/blog/2017/03/28/bundler-1-14-so-many-fixes.html"/>
    <id>http://bundler.io/blog/2017/03/28/bundler-1-14-so-many-fixes.html</id>
    <published>2017-03-28T07:15:00+00:00</published>
    <updated>2018-03-16T19:08:04+00:00</updated>
    <author>
      <name>André Arko</name>
    </author>
    <content type="html">&lt;h1 id="whats-new-in-bundler-114"&gt;What’s new in Bundler 1.14?&lt;/h1&gt;

&lt;p&gt;We somehow missed writing up an announcement when Bundler 1.14 was initially released, but several people kindly pointed out the problem. Just 48 days late, here’s what’s new in Bundler 1.14! In this feature release, we added several small features, and fixed a giant pile of bugs.&lt;/p&gt;

&lt;h3 id="conservative-updates"&gt;Conservative updates&lt;/h3&gt;

&lt;p&gt;Building on the previous &lt;a href="http://bundler.io/v1.13/whats_new.html#fine-controls-for-the-update-command"&gt;fine controls for the update command&lt;/a&gt;, the illustrious &lt;a href="https://github.com/chrismo"&gt;@chrismo&lt;/a&gt; worked his way through many gnarly possible usage combinations to implement the &lt;code&gt;update --conservative&lt;/code&gt; flag. Using the conservative flag allows &lt;code&gt;bundle update GEM&lt;/code&gt; to update the version of GEM, but prevents Bundler from updating the versions of any of the gems that GEM depends on. For a more in-depth discussion of why this is useful, check out the  &lt;a href="http://bundler.io/v1.14/man/bundle-update.1.html#OVERLAPPING-DEPENDENCIES"&gt;discussion of overlapping dependencies&lt;/a&gt; in the &lt;a href="http://bundler.io/v1.14/man/bundle-update.1.html"&gt;&lt;code&gt;update&lt;/code&gt; command man page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="checksum-validation"&gt;Checksum validation&lt;/h3&gt;

&lt;p&gt;As part of the &lt;a href="http://andre.arko.net/2014/03/28/the-new-rubygems-index-format/"&gt;compact index format&lt;/a&gt; provided by RubyGems.org, Bundler now has access to checksums for every .gem file. Starting with version 1.14, Bundler actively validates those checksums against downloaded .gem files before installing them. Hooray! 🎉&lt;/p&gt;

&lt;h3 id="improved-platform-support"&gt;Improved platform support&lt;/h3&gt;

&lt;p&gt;Courtesy of some intensive work by @segiddins, Bundler is getting better at handling applications that will be run on more than one platform, like both Unix and Windows. To start with, Bundler will now print a warning if your Gemfile includes any gems that will never be installed due to a &lt;code&gt;platform&lt;/code&gt; block. For gems that need to be compiled even though the author has uploaded a binary gem, the &lt;code&gt;force_ruby_platform&lt;/code&gt; config setting has you covered. Lastly, the new config setting &lt;code&gt;specific_platform&lt;/code&gt; tells Bundler to consider platforms during dependency resolution. This setting should significantly improve things for users installing a single bundle on more than one platform. We expect the &lt;code&gt;specific_platform&lt;/code&gt; setting to become the default behavior in Bundler 2.0.&lt;/p&gt;

&lt;h3 id="improved-required-ruby-versions"&gt;Improved required Ruby versions&lt;/h3&gt;

&lt;p&gt;Building on the support for Ruby and RubyGems version that was added in 1.13, Bundler 1.14 improves resolver error messages. If any gem conflicts with your Ruby or RubyGems version, the error message will now show both the conflicting dependencies and the chain of parent dependencies that led to the conflict.&lt;/p&gt;

&lt;h3 id="various-improvements"&gt;Various improvements&lt;/h3&gt;

&lt;p&gt;In addition to those larger additions, we made some smaller tweaks with the aim of smoothing and improving the overall experience of using Bundler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Installing gems using &lt;code&gt;sudo&lt;/code&gt; will now always prompt for a password, even if the sudo password is cached from an earlier command&lt;/li&gt;
  &lt;li&gt;The Gemfile method &lt;code&gt;platform&lt;/code&gt; now supports Ruby 2.5, allowing arguments like &lt;code&gt;:ruby_25&lt;/code&gt; or &lt;code&gt;:mri_25&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The “lockfile is missing dependencies” error (triggered by certain old lock files that were missing information) is no longer fatal. We now print instructions on how to repair the Gemfile, and install using one thread.&lt;/li&gt;
  &lt;li&gt;Running &lt;code&gt;require "bundler"&lt;/code&gt; is now about five times faster than it used to be.&lt;/li&gt;
  &lt;li&gt;Bundler now works when run by users without a home directory.&lt;/li&gt;
  &lt;li&gt;The output from &lt;code&gt;bundle env&lt;/code&gt; is now preformatted as Markdown for pasting into a GitHub issue.&lt;/li&gt;
  &lt;li&gt;After Bundler 2.0 is (eventually) released, Bundler 1.14 and greater will be able to automatically switch to Bundler 2.0+ for apps that need it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also fixed over 60 separate bugs, and you can read about every single one of them &lt;a href="https://github.com/bundler/bundler/blob/1-14-stable/CHANGELOG.md"&gt;in the Bundler 1.14 changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="how-to-upgrade"&gt;How To Upgrade&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;gem install bundler&lt;/code&gt; to upgrade to the newest version of Bundler.&lt;/p&gt;
</content>
  </entry>
</feed>
